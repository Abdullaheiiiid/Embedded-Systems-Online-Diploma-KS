
task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000504  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000802  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIOx_INIT>:
#include "Standard Library/Common Marcos.h"
#include "Standard Library/Type_Definitions.h"
#include <util/delay.h>


void GPIOx_INIT(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
	PORTA = 0;
  7c:	eb e3       	ldi	r30, 0x3B	; 59
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1
	DDRC &= ~(1<<0);
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	8c 93       	st	X, r24
}
  90:	cf 91       	pop	r28
  92:	df 91       	pop	r29
  94:	08 95       	ret

00000096 <main>:



int main(){
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	GPIOx_INIT();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <GPIOx_INIT>
	signed char cnt = 0;
  a4:	1a 82       	std	Y+2, r1	; 0x02
	char up = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		if(GET_BIT(PINC,0)){
  aa:	e3 e3       	ldi	r30, 0x33	; 51
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 2f       	mov	r24, r24
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	81 70       	andi	r24, 0x01	; 1
  b6:	90 70       	andi	r25, 0x00	; 0
  b8:	88 23       	and	r24, r24
  ba:	b9 f3       	breq	.-18     	; 0xaa <main+0x14>
			if(cnt == 8){
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	19 f4       	brne	.+6      	; 0xc8 <main+0x32>
				up = 0;
  c2:	19 82       	std	Y+1, r1	; 0x01
				cnt = 7;
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	8a 83       	std	Y+2, r24	; 0x02
			}
			if(cnt == -1){
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	19 f4       	brne	.+6      	; 0xd4 <main+0x3e>
				up = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
				cnt = 0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
			}

			if(up){
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	88 23       	and	r24, r24
  d8:	c9 f0       	breq	.+50     	; 0x10c <main+0x76>
				SET_BIT(PORTA,cnt);
  da:	ab e3       	ldi	r26, 0x3B	; 59
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	eb e3       	ldi	r30, 0x3B	; 59
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	33 27       	eor	r19, r19
  ec:	27 fd       	sbrc	r18, 7
  ee:	30 95       	com	r19
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 2e       	mov	r0, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x66>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <main+0x62>
 100:	84 2b       	or	r24, r20
 102:	8c 93       	st	X, r24
				cnt++;
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	8a 83       	std	Y+2, r24	; 0x02
 10a:	19 c0       	rjmp	.+50     	; 0x13e <main+0xa8>
			}
			else{
				CLEAR_BIT(PORTA,cnt);
 10c:	ab e3       	ldi	r26, 0x3B	; 59
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	eb e3       	ldi	r30, 0x3B	; 59
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	48 2f       	mov	r20, r24
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	28 2f       	mov	r18, r24
 11c:	33 27       	eor	r19, r19
 11e:	27 fd       	sbrc	r18, 7
 120:	30 95       	com	r19
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0x98>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <main+0x94>
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	8c 93       	st	X, r24
				cnt--;
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	8a 83       	std	Y+2, r24	; 0x02
			}
			while(GET_BIT(PINC,0));
 13e:	e3 e3       	ldi	r30, 0x33	; 51
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 2f       	mov	r24, r24
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	90 70       	andi	r25, 0x00	; 0
 14c:	88 23       	and	r24, r24
 14e:	b9 f7       	brne	.-18     	; 0x13e <main+0xa8>
 150:	ac cf       	rjmp	.-168    	; 0xaa <main+0x14>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
