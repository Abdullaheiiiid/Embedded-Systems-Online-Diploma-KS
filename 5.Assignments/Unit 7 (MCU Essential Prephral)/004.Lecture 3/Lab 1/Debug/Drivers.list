
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005d0  080005d8  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d8  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005d8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ed5  00000000  00000000  00010601  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000299  00000000  00000000  000114d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000004ec  00000000  00000000  0001176f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b8  00000000  00000000  00011c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  00011d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001a5f  00000000  00000000  00011db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000914  00000000  00000000  00013817  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007835  00000000  00000000  0001412b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b960  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000274  00000000  00000000  0001b9dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005b8 	.word	0x080005b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005b8 	.word	0x080005b8

08000170 <_delay_ms>:
#define RCC_GPIOD_RESET	                                         RCC->APB2RSTR |=  (1<<5);\
		 	 	 	 	 	 	 	 	 	 	 	 	 	 	 RCC->APB2RSTR &= ~(1<<5)

//*****************************  Generic Macros  *****************************//

void _delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <_delay_ms+0x26>
		for (j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <_delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <_delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <_delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <GPIO_CRLH_PIN>:
//@brief 		- GET FIRST BIT NUMBER OF PINy THAT WILL BE CONFIGURED USING MODE[0:1],CNF[0:1]
//@param [in] 	- PIN NUMBER (uint16 PIN_NUMBER)											            @ref GPIO_PINS_define(uint16 PIN_NUMBER)
//@param [out] 	- NUMBER OF FIRST BIT OF PINy
//Note			-

uint8 GPIO_CRLH_PIN(uint16 PIN_NUMBER){
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	80fb      	strh	r3, [r7, #6]

	switch(PIN_NUMBER){
 80001b2:	88fb      	ldrh	r3, [r7, #6]
 80001b4:	2b80      	cmp	r3, #128	; 0x80
 80001b6:	d042      	beq.n	800023e <GPIO_CRLH_PIN+0x96>
 80001b8:	2b80      	cmp	r3, #128	; 0x80
 80001ba:	dc11      	bgt.n	80001e0 <GPIO_CRLH_PIN+0x38>
 80001bc:	2b08      	cmp	r3, #8
 80001be:	d036      	beq.n	800022e <GPIO_CRLH_PIN+0x86>
 80001c0:	2b08      	cmp	r3, #8
 80001c2:	dc06      	bgt.n	80001d2 <GPIO_CRLH_PIN+0x2a>
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	d02e      	beq.n	8000226 <GPIO_CRLH_PIN+0x7e>
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	d02e      	beq.n	800022a <GPIO_CRLH_PIN+0x82>
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d028      	beq.n	8000222 <GPIO_CRLH_PIN+0x7a>
 80001d0:	e047      	b.n	8000262 <GPIO_CRLH_PIN+0xba>
 80001d2:	2b20      	cmp	r3, #32
 80001d4:	d02f      	beq.n	8000236 <GPIO_CRLH_PIN+0x8e>
 80001d6:	2b40      	cmp	r3, #64	; 0x40
 80001d8:	d02f      	beq.n	800023a <GPIO_CRLH_PIN+0x92>
 80001da:	2b10      	cmp	r3, #16
 80001dc:	d029      	beq.n	8000232 <GPIO_CRLH_PIN+0x8a>
 80001de:	e040      	b.n	8000262 <GPIO_CRLH_PIN+0xba>
 80001e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001e4:	d033      	beq.n	800024e <GPIO_CRLH_PIN+0xa6>
 80001e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ea:	dc09      	bgt.n	8000200 <GPIO_CRLH_PIN+0x58>
 80001ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001f0:	d029      	beq.n	8000246 <GPIO_CRLH_PIN+0x9e>
 80001f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001f6:	d028      	beq.n	800024a <GPIO_CRLH_PIN+0xa2>
 80001f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001fc:	d021      	beq.n	8000242 <GPIO_CRLH_PIN+0x9a>
 80001fe:	e030      	b.n	8000262 <GPIO_CRLH_PIN+0xba>
 8000200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000204:	d027      	beq.n	8000256 <GPIO_CRLH_PIN+0xae>
 8000206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800020a:	dc03      	bgt.n	8000214 <GPIO_CRLH_PIN+0x6c>
 800020c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000210:	d01f      	beq.n	8000252 <GPIO_CRLH_PIN+0xaa>
 8000212:	e026      	b.n	8000262 <GPIO_CRLH_PIN+0xba>
 8000214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000218:	d01f      	beq.n	800025a <GPIO_CRLH_PIN+0xb2>
 800021a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800021e:	d01e      	beq.n	800025e <GPIO_CRLH_PIN+0xb6>
 8000220:	e01f      	b.n	8000262 <GPIO_CRLH_PIN+0xba>
	case GPIO_PIN0:
		return 0;
 8000222:	2300      	movs	r3, #0
 8000224:	e01e      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN1:
		return 4;
 8000226:	2304      	movs	r3, #4
 8000228:	e01c      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN2:
		return 8;
 800022a:	2308      	movs	r3, #8
 800022c:	e01a      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN3:
		return 12;
 800022e:	230c      	movs	r3, #12
 8000230:	e018      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN4:
		return 16;
 8000232:	2310      	movs	r3, #16
 8000234:	e016      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN5:
		return 20;
 8000236:	2314      	movs	r3, #20
 8000238:	e014      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN6:
		return 24;
 800023a:	2318      	movs	r3, #24
 800023c:	e012      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN7:
		return 28;
 800023e:	231c      	movs	r3, #28
 8000240:	e010      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>


	case GPIO_PIN8:
		return 0;
 8000242:	2300      	movs	r3, #0
 8000244:	e00e      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN9:
		return 4;
 8000246:	2304      	movs	r3, #4
 8000248:	e00c      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN10:
		return 8;
 800024a:	2308      	movs	r3, #8
 800024c:	e00a      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN11:
		return 12;
 800024e:	230c      	movs	r3, #12
 8000250:	e008      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN12:
		return 16;
 8000252:	2310      	movs	r3, #16
 8000254:	e006      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN13:
		return 20;
 8000256:	2314      	movs	r3, #20
 8000258:	e004      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN14:
		return 24;
 800025a:	2318      	movs	r3, #24
 800025c:	e002      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN15:
		return 28;
 800025e:	231c      	movs	r3, #28
 8000260:	e000      	b.n	8000264 <GPIO_CRLH_PIN+0xbc>
	}
	return 0;
 8000262:	2300      	movs	r3, #0

}
 8000264:	4618      	mov	r0, r3
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
	...

08000270 <GPIO_INIT>:
//@brief 		- INITIALIZE THE GPIOx PINy ACCORDING TO PARAMETERS
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), GPIO PIN(GPIO_PINS_config PIN_config)
//@retval 		- NOTHING
//Note			-

void GPIO_INIT(GPIO_typedef *GPIOx, GPIO_PINS_config *PIN_config){
 8000270:	b590      	push	{r4, r7, lr}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]

	//	PORT CONFIGURATION REGISTER LOW (GPIOx->CRL) CONFIGURE PINS 0 >>> 7
	//	PORT CONFIGURATION REGISTER HIGH (GPIOx->CRH) CONFIGURE PINS 8 >>> 15

	volatile uint32* ConfigRegister = (PIN_config->GPIO_PIN <= GPIO_PIN7) ? &GPIOx->CRL : &GPIOx->CRH ;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	2b80      	cmp	r3, #128	; 0x80
 8000280:	d801      	bhi.n	8000286 <GPIO_INIT+0x16>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	e001      	b.n	800028a <GPIO_INIT+0x1a>
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	3304      	adds	r3, #4
 800028a:	60fb      	str	r3, [r7, #12]
	GPIOx->ODR ;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68db      	ldr	r3, [r3, #12]

	//	CLEAR CNFx[1:0] MODEx[1:0]
	*ConfigRegister &= ~(0XF << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ff87 	bl	80001a8 <GPIO_CRLH_PIN>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	230f      	movs	r3, #15
 80002a0:	4093      	lsls	r3, r2
 80002a2:	43da      	mvns	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
	uint8 mode = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	72fb      	strb	r3, [r7, #11]
	switch(PIN_config->GPIO_MODE){
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	789b      	ldrb	r3, [r3, #2]
 80002b6:	2b07      	cmp	r3, #7
 80002b8:	f200 808a 	bhi.w	80003d0 <GPIO_INIT+0x160>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <GPIO_INIT+0x54>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002e5 	.word	0x080002e5
 80002c8:	080002e5 	.word	0x080002e5
 80002cc:	080002e5 	.word	0x080002e5
 80002d0:	080002e5 	.word	0x080002e5
 80002d4:	08000317 	.word	0x08000317
 80002d8:	08000317 	.word	0x08000317
 80002dc:	0800034b 	.word	0x0800034b
 80002e0:	0800038d 	.word	0x0800038d
	case GPIO_OUTPUT_PUSH_PULL:
	case GPIO_OUTPUT_OPEN_DRAIN:
	case GPIO_OUTPUT_ALTERNATIVE_PUSH_PULL:
	case GPIO_OUTPUT_ALTERNATIVE_OPEN_DRAIN:
		mode = (PIN_config->GPIO_MODE << 2) | (PIN_config->GPIO_SPEED);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	789b      	ldrb	r3, [r3, #2]
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	b25a      	sxtb	r2, r3
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	78db      	ldrb	r3, [r3, #3]
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	4313      	orrs	r3, r2
 80002f4:	b25b      	sxtb	r3, r3
 80002f6:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 80002f8:	7afc      	ldrb	r4, [r7, #11]
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff52 	bl	80001a8 <GPIO_CRLH_PIN>
 8000304:	4603      	mov	r3, r0
 8000306:	fa04 f203 	lsl.w	r2, r4, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	431a      	orrs	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	601a      	str	r2, [r3, #0]
		break;
 8000314:	e05c      	b.n	80003d0 <GPIO_INIT+0x160>

	case GPIO_INPUT_ANALOG:
	case GPIO_INPUT_FLOATING:
		mode = ((PIN_config->GPIO_MODE - 4 ) << 2) | (PIN_config->GPIO_SPEED) ;
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	789b      	ldrb	r3, [r3, #2]
 800031a:	3b04      	subs	r3, #4
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	b25a      	sxtb	r2, r3
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	78db      	ldrb	r3, [r3, #3]
 8000324:	b25b      	sxtb	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b25b      	sxtb	r3, r3
 800032a:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 800032c:	7afc      	ldrb	r4, [r7, #11]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff38 	bl	80001a8 <GPIO_CRLH_PIN>
 8000338:	4603      	mov	r3, r0
 800033a:	fa04 f203 	lsl.w	r2, r4, r3
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	431a      	orrs	r2, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	601a      	str	r2, [r3, #0]
		break;
 8000348:	e042      	b.n	80003d0 <GPIO_INIT+0x160>

	case GPIO_INPUT_PULLUP:
		mode = ((PIN_config->GPIO_MODE - 4 ) << 2) | (PIN_config->GPIO_SPEED);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	789b      	ldrb	r3, [r3, #2]
 800034e:	3b04      	subs	r3, #4
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	b25a      	sxtb	r2, r3
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	78db      	ldrb	r3, [r3, #3]
 8000358:	b25b      	sxtb	r3, r3
 800035a:	4313      	orrs	r3, r2
 800035c:	b25b      	sxtb	r3, r3
 800035e:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 8000360:	7afc      	ldrb	r4, [r7, #11]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff1e 	bl	80001a8 <GPIO_CRLH_PIN>
 800036c:	4603      	mov	r3, r0
 800036e:	fa04 f203 	lsl.w	r2, r4, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]
		GPIOx->ODR |= PIN_config->GPIO_PIN;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	8812      	ldrh	r2, [r2, #0]
 8000384:	431a      	orrs	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	60da      	str	r2, [r3, #12]
		break;
 800038a:	e021      	b.n	80003d0 <GPIO_INIT+0x160>

	case GPIO_INPUT_PULLDOWN:
		mode = ((PIN_config->GPIO_MODE - 5 ) << 2) | (PIN_config->GPIO_SPEED);
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	789b      	ldrb	r3, [r3, #2]
 8000390:	3b05      	subs	r3, #5
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	b25a      	sxtb	r2, r3
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	78db      	ldrb	r3, [r3, #3]
 800039a:	b25b      	sxtb	r3, r3
 800039c:	4313      	orrs	r3, r2
 800039e:	b25b      	sxtb	r3, r3
 80003a0:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 80003a2:	7afc      	ldrb	r4, [r7, #11]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fefd 	bl	80001a8 <GPIO_CRLH_PIN>
 80003ae:	4603      	mov	r3, r0
 80003b0:	fa04 f203 	lsl.w	r2, r4, r3
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	601a      	str	r2, [r3, #0]
		GPIOx->ODR &= ~PIN_config->GPIO_PIN;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	8812      	ldrh	r2, [r2, #0]
 80003c6:	43d2      	mvns	r2, r2
 80003c8:	401a      	ands	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	60da      	str	r2, [r3, #12]
		break;
 80003ce:	bf00      	nop
	}

}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <GPIO_GET_PIN>:
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), PIN NUMBER THAT WILL BE READ ACCORDING TO @ref GPIO_PINS_define(uint16 PIN_NUMBER)
//@param [out] 	- PINy VALUE ACCORDING TO //@ref GPIO_PINS_VALUE_define
//@retval 		- NOTHING
//Note			-

uint8 GPIO_GET_PIN(GPIO_typedef *GPIOx,uint16 PIN_NUMBER){
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	807b      	strh	r3, [r7, #2]

	if(GPIOx->IDR & PIN_NUMBER)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	887b      	ldrh	r3, [r7, #2]
 80003ea:	4013      	ands	r3, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <GPIO_GET_PIN+0x1c>
		return GPIO_PIN_SET;
 80003f0:	2301      	movs	r3, #1
 80003f2:	e000      	b.n	80003f6 <GPIO_GET_PIN+0x1e>
	else
		return GPIO_PIN_RESET;
 80003f4:	2300      	movs	r3, #0

}
 80003f6:	4618      	mov	r0, r3
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <GPIO_TOGGLE_PIN>:
//@brief 		- TOGGLE THE PINy OF GPIOx
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), PIN NUMBER THAT WILL BE READ ACCORDING TO @ref GPIO_PINS_define(uint16 PIN_NUMBER)
//@retval 		- NOTHING
//Note			-

void GPIO_TOGGLE_PIN(GPIO_typedef *GPIOx, uint16 PIN_NUMBER){
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR ^= PIN_NUMBER;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	68da      	ldr	r2, [r3, #12]
 8000410:	887b      	ldrh	r3, [r7, #2]
 8000412:	405a      	eors	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	60da      	str	r2, [r3, #12]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
	...

08000424 <CLOCK_init>:
#include "STM32F103C6.h"
#include "GPIO.h"
#include "GPIO.c"

void CLOCK_init(){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	//	ENABLE GPIOA
	RCC_GPIOA_ENABLE;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <CLOCK_init+0x24>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <CLOCK_init+0x24>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
	//	ENABLE GPIOB
	RCC_GPIOB_ENABLE;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <CLOCK_init+0x24>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a03      	ldr	r2, [pc, #12]	; (8000448 <CLOCK_init+0x24>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000

0800044c <GPIO_init>:

void GPIO_init(){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
	GPIO_PINS_config PIN;
	//	PORTA PIN 0 INPUT FLOATING
	PIN.GPIO_PIN = GPIO_PIN1;
 8000452:	2302      	movs	r3, #2
 8000454:	80bb      	strh	r3, [r7, #4]
	PIN.GPIO_MODE = GPIO_INPUT_FLOATING;
 8000456:	2305      	movs	r3, #5
 8000458:	71bb      	strb	r3, [r7, #6]
	PIN.GPIO_SPEED = GPIO_INPUT_SPEED;
 800045a:	2300      	movs	r3, #0
 800045c:	71fb      	strb	r3, [r7, #7]
	GPIO_INIT(GPIOA, &PIN);
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	4815      	ldr	r0, [pc, #84]	; (80004b8 <GPIO_init+0x6c>)
 8000464:	f7ff ff04 	bl	8000270 <GPIO_INIT>

	//	PORTA PIN 13 INPUT FLOATING
	PIN.GPIO_PIN = GPIO_PIN13;
 8000468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046c:	80bb      	strh	r3, [r7, #4]
	PIN.GPIO_MODE = GPIO_INPUT_FLOATING;
 800046e:	2305      	movs	r3, #5
 8000470:	71bb      	strb	r3, [r7, #6]
	PIN.GPIO_SPEED = GPIO_INPUT_SPEED;
 8000472:	2300      	movs	r3, #0
 8000474:	71fb      	strb	r3, [r7, #7]
	GPIO_INIT(GPIOA, &PIN);
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	480f      	ldr	r0, [pc, #60]	; (80004b8 <GPIO_init+0x6c>)
 800047c:	f7ff fef8 	bl	8000270 <GPIO_INIT>

	//	PORTB PIN 0 OUTPUT PUSH PULL
	PIN.GPIO_PIN = GPIO_PIN1;
 8000480:	2302      	movs	r3, #2
 8000482:	80bb      	strh	r3, [r7, #4]
	PIN.GPIO_MODE = GPIO_OUTPUT_PUSH_PULL;
 8000484:	2300      	movs	r3, #0
 8000486:	71bb      	strb	r3, [r7, #6]
	PIN.GPIO_SPEED = GPIO_OUTPUT_SPEED_10;
 8000488:	2301      	movs	r3, #1
 800048a:	71fb      	strb	r3, [r7, #7]
	GPIO_INIT(GPIOB, &PIN);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	480a      	ldr	r0, [pc, #40]	; (80004bc <GPIO_init+0x70>)
 8000492:	f7ff feed 	bl	8000270 <GPIO_INIT>

	//	PORTA PIN 13 OUTPUT PUSH PULL
	PIN.GPIO_PIN = GPIO_PIN13;
 8000496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049a:	80bb      	strh	r3, [r7, #4]
	PIN.GPIO_MODE = GPIO_OUTPUT_PUSH_PULL;
 800049c:	2300      	movs	r3, #0
 800049e:	71bb      	strb	r3, [r7, #6]
	PIN.GPIO_SPEED = GPIO_OUTPUT_SPEED_10;
 80004a0:	2301      	movs	r3, #1
 80004a2:	71fb      	strb	r3, [r7, #7]
	GPIO_INIT(GPIOB, &PIN);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4619      	mov	r1, r3
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <GPIO_init+0x70>)
 80004aa:	f7ff fee1 	bl	8000270 <GPIO_INIT>

}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <main>:


int main(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	CLOCK_init();
 80004c4:	f7ff ffae 	bl	8000424 <CLOCK_init>
	GPIO_init();
 80004c8:	f7ff ffc0 	bl	800044c <GPIO_init>
	while(1){
		//		PA0 IS FLOATING WITH PULL UP RESISTANCE
		if(GPIO_GET_PIN(GPIOA, GPIO_PIN1) == GPIO_PIN_RESET){
 80004cc:	2102      	movs	r1, #2
 80004ce:	4811      	ldr	r0, [pc, #68]	; (8000514 <main+0x54>)
 80004d0:	f7ff ff82 	bl	80003d8 <GPIO_GET_PIN>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d10b      	bne.n	80004f2 <main+0x32>
			GPIO_TOGGLE_PIN(GPIOB, GPIO_PIN1);
 80004da:	2102      	movs	r1, #2
 80004dc:	480e      	ldr	r0, [pc, #56]	; (8000518 <main+0x58>)
 80004de:	f7ff ff8f 	bl	8000400 <GPIO_TOGGLE_PIN>
			while(GPIO_GET_PIN(GPIOA, GPIO_PIN1) == GPIO_PIN_RESET);
 80004e2:	bf00      	nop
 80004e4:	2102      	movs	r1, #2
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x54>)
 80004e8:	f7ff ff76 	bl	80003d8 <GPIO_GET_PIN>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f8      	beq.n	80004e4 <main+0x24>
		}
		//		PA13 IS FLOATING WITH PULL DOWN RESISTANCE
		if(GPIO_GET_PIN(GPIOA, GPIO_PIN13) == GPIO_PIN_SET){
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <main+0x54>)
 80004f8:	f7ff ff6e 	bl	80003d8 <GPIO_GET_PIN>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d104      	bne.n	800050c <main+0x4c>
			GPIO_TOGGLE_PIN(GPIOB, GPIO_PIN13);
 8000502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x58>)
 8000508:	f7ff ff7a 	bl	8000400 <GPIO_TOGGLE_PIN>
		}
		_delay_ms(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fe2f 	bl	8000170 <_delay_ms>
		if(GPIO_GET_PIN(GPIOA, GPIO_PIN1) == GPIO_PIN_RESET){
 8000512:	e7db      	b.n	80004cc <main+0xc>
 8000514:	40010800 	.word	0x40010800
 8000518:	40010c00 	.word	0x40010c00

0800051c <Reset_Handler>:
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
 800051e:	4685      	mov	sp, r0
 8000520:	f3af 8000 	nop.w
 8000524:	480c      	ldr	r0, [pc, #48]	; (8000558 <LoopForever+0x6>)
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LoopForever+0xa>)
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <LoopForever+0xe>)
 800052a:	2300      	movs	r3, #0
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:
 800052e:	58d4      	ldr	r4, [r2, r3]
 8000530:	50c4      	str	r4, [r0, r3]
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:
 8000534:	18c4      	adds	r4, r0, r3
 8000536:	428c      	cmp	r4, r1
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <LoopForever+0x12>)
 800053c:	4c0a      	ldr	r4, [pc, #40]	; (8000568 <LoopForever+0x16>)
 800053e:	2300      	movs	r3, #0
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:
 8000546:	42a2      	cmp	r2, r4
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>
 800054a:	f000 f811 	bl	8000570 <__libc_init_array>
 800054e:	f7ff ffb7 	bl	80004c0 <main>

08000552 <LoopForever>:
 8000552:	e7fe      	b.n	8000552 <LoopForever>
 8000554:	20002800 	.word	0x20002800
 8000558:	20000000 	.word	0x20000000
 800055c:	20000000 	.word	0x20000000
 8000560:	080005d8 	.word	0x080005d8
 8000564:	20000000 	.word	0x20000000
 8000568:	2000001c 	.word	0x2000001c

0800056c <ADC1_2_IRQHandler>:
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>
	...

08000570 <__libc_init_array>:
 8000570:	b570      	push	{r4, r5, r6, lr}
 8000572:	2500      	movs	r5, #0
 8000574:	4e0c      	ldr	r6, [pc, #48]	; (80005a8 <__libc_init_array+0x38>)
 8000576:	4c0d      	ldr	r4, [pc, #52]	; (80005ac <__libc_init_array+0x3c>)
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	42a5      	cmp	r5, r4
 800057e:	d109      	bne.n	8000594 <__libc_init_array+0x24>
 8000580:	f000 f81a 	bl	80005b8 <_init>
 8000584:	2500      	movs	r5, #0
 8000586:	4e0a      	ldr	r6, [pc, #40]	; (80005b0 <__libc_init_array+0x40>)
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <__libc_init_array+0x44>)
 800058a:	1ba4      	subs	r4, r4, r6
 800058c:	10a4      	asrs	r4, r4, #2
 800058e:	42a5      	cmp	r5, r4
 8000590:	d105      	bne.n	800059e <__libc_init_array+0x2e>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000598:	4798      	blx	r3
 800059a:	3501      	adds	r5, #1
 800059c:	e7ee      	b.n	800057c <__libc_init_array+0xc>
 800059e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005a2:	4798      	blx	r3
 80005a4:	3501      	adds	r5, #1
 80005a6:	e7f2      	b.n	800058e <__libc_init_array+0x1e>
 80005a8:	080005d0 	.word	0x080005d0
 80005ac:	080005d0 	.word	0x080005d0
 80005b0:	080005d0 	.word	0x080005d0
 80005b4:	080005d4 	.word	0x080005d4

080005b8 <_init>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr

080005c4 <_fini>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr
