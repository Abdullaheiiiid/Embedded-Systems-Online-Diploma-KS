
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  0001038c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  0800038c  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800038c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800038c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000f0  00000000  00000000  000103b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000a7  00000000  00000000  000104a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  0001054c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00010660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000106c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ac5  00000000  00000000  00010708  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000012a  00000000  00000000  000111cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00002fed  00000000  00000000  000112f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000142e4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  00014360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800036c 	.word	0x0800036c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800036c 	.word	0x0800036c

08000170 <CLOCK_SETUP>:
#define GPIOB_IDR    *((volatile unsigned int*) (GPIOB_BASE + 0x08))
#define GPIOB_ODR    *((volatile unsigned int*) (GPIOB_BASE + 0x0C))



void CLOCK_SETUP(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1<<IOPA) | (1<<IOPB);
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <CLOCK_SETUP+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a03      	ldr	r2, [pc, #12]	; (8000188 <CLOCK_SETUP+0x18>)
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40021018 	.word	0x40021018

0800018c <GPIOx_INIT>:

void GPIOx_INIT(){
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0

	GPIOB_CRL &= ~((1<<6)|(1<<7));
 8000190:	4b25      	ldr	r3, [pc, #148]	; (8000228 <GPIOx_INIT+0x9c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a24      	ldr	r2, [pc, #144]	; (8000228 <GPIOx_INIT+0x9c>)
 8000196:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800019a:	6013      	str	r3, [r2, #0]
	GPIOB_CRL &= ~(1<<5);
 800019c:	4b22      	ldr	r3, [pc, #136]	; (8000228 <GPIOx_INIT+0x9c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a21      	ldr	r2, [pc, #132]	; (8000228 <GPIOx_INIT+0x9c>)
 80001a2:	f023 0320 	bic.w	r3, r3, #32
 80001a6:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= (1<<4);
 80001a8:	4b1f      	ldr	r3, [pc, #124]	; (8000228 <GPIOx_INIT+0x9c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a1e      	ldr	r2, [pc, #120]	; (8000228 <GPIOx_INIT+0x9c>)
 80001ae:	f043 0310 	orr.w	r3, r3, #16
 80001b2:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~((1<<22)|(1<<23));
 80001b4:	4b1d      	ldr	r3, [pc, #116]	; (800022c <GPIOx_INIT+0xa0>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a1c      	ldr	r2, [pc, #112]	; (800022c <GPIOx_INIT+0xa0>)
 80001ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001be:	6013      	str	r3, [r2, #0]
	GPIOB_CRH &= ~(1<<21);
 80001c0:	4b1a      	ldr	r3, [pc, #104]	; (800022c <GPIOx_INIT+0xa0>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a19      	ldr	r2, [pc, #100]	; (800022c <GPIOx_INIT+0xa0>)
 80001c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80001ca:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= (1<<20);
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <GPIOx_INIT+0xa0>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a16      	ldr	r2, [pc, #88]	; (800022c <GPIOx_INIT+0xa0>)
 80001d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d6:	6013      	str	r3, [r2, #0]

	GPIOA_CRL &= ~((1<<5)|(1<<4));
 80001d8:	4b15      	ldr	r3, [pc, #84]	; (8000230 <GPIOx_INIT+0xa4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a14      	ldr	r2, [pc, #80]	; (8000230 <GPIOx_INIT+0xa4>)
 80001de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA_CRL &= ~(1<<7);
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <GPIOx_INIT+0xa4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <GPIOx_INIT+0xa4>)
 80001ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= (1<<6);
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <GPIOx_INIT+0xa4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	; (8000230 <GPIOx_INIT+0xa4>)
 80001f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~((1<<21)|(1<<20));
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <GPIOx_INIT+0xa8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <GPIOx_INIT+0xa8>)
 8000202:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= ~(1<<23);
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <GPIOx_INIT+0xa8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <GPIOx_INIT+0xa8>)
 800020e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000212:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= (1<<22);
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <GPIOx_INIT+0xa8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a06      	ldr	r2, [pc, #24]	; (8000234 <GPIOx_INIT+0xa8>)
 800021a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800021e:	6013      	str	r3, [r2, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40010c00 	.word	0x40010c00
 800022c:	40010c04 	.word	0x40010c04
 8000230:	40010800 	.word	0x40010800
 8000234:	40010804 	.word	0x40010804

08000238 <DELAY>:

void DELAY(int period){
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	for(int i = 0 ; i < period ; i++)
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	e00c      	b.n	8000260 <DELAY+0x28>
		for(int j = 0 ; j < 1000 ; j++);
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	e002      	b.n	8000252 <DELAY+0x1a>
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	3301      	adds	r3, #1
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000258:	dbf8      	blt.n	800024c <DELAY+0x14>
	for(int i = 0 ; i < period ; i++)
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fa      	ldr	r2, [r7, #12]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	dbee      	blt.n	8000246 <DELAY+0xe>
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
	...

08000274 <main>:
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

	CLOCK_SETUP();
 8000278:	f7ff ff7a 	bl	8000170 <CLOCK_SETUP>
	GPIOx_INIT();
 800027c:	f7ff ff86 	bl	800018c <GPIOx_INIT>

	/* Loop forever */
	while(1){
		if(!((GPIOA_IDR & (1<<1)) & (1<<1))){
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x54>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0302 	and.w	r3, r3, #2
 8000288:	2b00      	cmp	r3, #0
 800028a:	d10c      	bne.n	80002a6 <main+0x32>
			GPIOB_ODR ^= (1<<1);
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <main+0x58>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0e      	ldr	r2, [pc, #56]	; (80002cc <main+0x58>)
 8000292:	f083 0302 	eor.w	r3, r3, #2
 8000296:	6013      	str	r3, [r2, #0]
			while(!((GPIOA_IDR & (1<<1)) & (1<<1)));
 8000298:	bf00      	nop
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <main+0x54>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0302 	and.w	r3, r3, #2
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <main+0x26>
		}


		if(((GPIOA_IDR & (1<<13)) & (1<<13))){
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <main+0x54>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d005      	beq.n	80002be <main+0x4a>
			GPIOB_ODR ^= (1<<13);
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <main+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a05      	ldr	r2, [pc, #20]	; (80002cc <main+0x58>)
 80002b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002bc:	6013      	str	r3, [r2, #0]
		}
		DELAY(1);
 80002be:	2001      	movs	r0, #1
 80002c0:	f7ff ffba 	bl	8000238 <DELAY>
		if(!((GPIOA_IDR & (1<<1)) & (1<<1))){
 80002c4:	e7dc      	b.n	8000280 <main+0xc>
 80002c6:	bf00      	nop
 80002c8:	40010808 	.word	0x40010808
 80002cc:	40010c0c 	.word	0x40010c0c

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f811 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffb7 	bl	8000274 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800038c 	.word	0x0800038c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	2500      	movs	r5, #0
 8000328:	4e0c      	ldr	r6, [pc, #48]	; (800035c <__libc_init_array+0x38>)
 800032a:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032c:	1ba4      	subs	r4, r4, r6
 800032e:	10a4      	asrs	r4, r4, #2
 8000330:	42a5      	cmp	r5, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	f000 f81a 	bl	800036c <_init>
 8000338:	2500      	movs	r5, #0
 800033a:	4e0a      	ldr	r6, [pc, #40]	; (8000364 <__libc_init_array+0x40>)
 800033c:	4c0a      	ldr	r4, [pc, #40]	; (8000368 <__libc_init_array+0x44>)
 800033e:	1ba4      	subs	r4, r4, r6
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	42a5      	cmp	r5, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034c:	4798      	blx	r3
 800034e:	3501      	adds	r5, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000356:	4798      	blx	r3
 8000358:	3501      	adds	r5, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
