
Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000c64  08000c64  00010c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c90  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000cb8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000cb8  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fd6  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000629  00000000  00000000  0002201f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007d8  00000000  00000000  00022648  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00022e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00022f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000026fe  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001fd0  00000000  00000000  00025786  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009792  00000000  00000000  00027756  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00030ee8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000041c  00000000  00000000  00030f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c4c 	.word	0x08000c4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c4c 	.word	0x08000c4c

08000170 <GPIO_CRLH_PIN>:
//@brief 		- GET FIRST BIT NUMBER OF PINy THAT WILL BE CONFIGURED USING MODE[0:1],CNF[0:1]
//@param [in] 	- PIN NUMBER (uint16 PIN_NUMBER)											            @ref GPIO_PINS_define(uint16 PIN_NUMBER)
//@param [out] 	- NUMBER OF FIRST BIT OF PINy
//Note			-

uint8 GPIO_CRLH_PIN(uint16 PIN_NUMBER){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]

	switch(PIN_NUMBER){
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <GPIO_CRLH_PIN+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <GPIO_CRLH_PIN+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <GPIO_CRLH_PIN+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <GPIO_CRLH_PIN+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <GPIO_CRLH_PIN+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <GPIO_CRLH_PIN+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <GPIO_CRLH_PIN+0x7a>
 8000198:	e047      	b.n	800022a <GPIO_CRLH_PIN+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <GPIO_CRLH_PIN+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <GPIO_CRLH_PIN+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <GPIO_CRLH_PIN+0x8a>
 80001a6:	e040      	b.n	800022a <GPIO_CRLH_PIN+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <GPIO_CRLH_PIN+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <GPIO_CRLH_PIN+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <GPIO_CRLH_PIN+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <GPIO_CRLH_PIN+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <GPIO_CRLH_PIN+0x9a>
 80001c6:	e030      	b.n	800022a <GPIO_CRLH_PIN+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <GPIO_CRLH_PIN+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <GPIO_CRLH_PIN+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <GPIO_CRLH_PIN+0xaa>
 80001da:	e026      	b.n	800022a <GPIO_CRLH_PIN+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <GPIO_CRLH_PIN+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <GPIO_CRLH_PIN+0xb6>
 80001e8:	e01f      	b.n	800022a <GPIO_CRLH_PIN+0xba>
	case GPIO_PIN0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <GPIO_CRLH_PIN+0xbc>


	case GPIO_PIN8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	case GPIO_PIN15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <GPIO_CRLH_PIN+0xbc>
	}
	return 0;
 800022a:	2300      	movs	r3, #0

}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
	...

08000238 <GPIO_INIT>:
//@brief 		- INITIALIZE THE GPIOx PINy ACCORDING TO PARAMETERS
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), GPIO PIN(GPIO_PINS_config PIN_config)
//@retval 		- NOTHING
//Note			-

void GPIO_INIT(GPIO_typedef *GPIOx, GPIO_PINS_config *PIN_config){
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]

	//	PORT CONFIGURATION REGISTER LOW (GPIOx->CRL) CONFIGURE PINS 0 >>> 7
	//	PORT CONFIGURATION REGISTER HIGH (GPIOx->CRH) CONFIGURE PINS 8 >>> 15

	volatile uint32* ConfigRegister = (PIN_config->GPIO_PIN <= GPIO_PIN7) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	2b80      	cmp	r3, #128	; 0x80
 8000248:	d801      	bhi.n	800024e <GPIO_INIT+0x16>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	e001      	b.n	8000252 <GPIO_INIT+0x1a>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	3304      	adds	r3, #4
 8000252:	60fb      	str	r3, [r7, #12]
	GPIOx->ODR ;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68db      	ldr	r3, [r3, #12]

	//	CLEAR CNFx[1:0] MODEx[1:0]
	*ConfigRegister &= ~(0XF << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff87 	bl	8000170 <GPIO_CRLH_PIN>
 8000262:	4603      	mov	r3, r0
 8000264:	461a      	mov	r2, r3
 8000266:	230f      	movs	r3, #15
 8000268:	4093      	lsls	r3, r2
 800026a:	43da      	mvns	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	401a      	ands	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]
	uint8 mode = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	72fb      	strb	r3, [r7, #11]
	switch(PIN_config->GPIO_MODE){
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	789b      	ldrb	r3, [r3, #2]
 800027e:	2b07      	cmp	r3, #7
 8000280:	f200 808a 	bhi.w	8000398 <GPIO_INIT+0x160>
 8000284:	a201      	add	r2, pc, #4	; (adr r2, 800028c <GPIO_INIT+0x54>)
 8000286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028a:	bf00      	nop
 800028c:	080002ad 	.word	0x080002ad
 8000290:	080002ad 	.word	0x080002ad
 8000294:	080002ad 	.word	0x080002ad
 8000298:	080002ad 	.word	0x080002ad
 800029c:	080002df 	.word	0x080002df
 80002a0:	080002df 	.word	0x080002df
 80002a4:	08000313 	.word	0x08000313
 80002a8:	08000355 	.word	0x08000355
	case GPIO_OUTPUT_PUSH_PULL:
	case GPIO_OUTPUT_OPEN_DRAIN:
	case GPIO_OUTPUT_ALTERNATIVE_PUSH_PULL:
	case GPIO_OUTPUT_ALTERNATIVE_OPEN_DRAIN:
		mode = (PIN_config->GPIO_MODE << 2) | (PIN_config->GPIO_SPEED);
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	789b      	ldrb	r3, [r3, #2]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	b25a      	sxtb	r2, r3
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	78db      	ldrb	r3, [r3, #3]
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	4313      	orrs	r3, r2
 80002bc:	b25b      	sxtb	r3, r3
 80002be:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 80002c0:	7afc      	ldrb	r4, [r7, #11]
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff52 	bl	8000170 <GPIO_CRLH_PIN>
 80002cc:	4603      	mov	r3, r0
 80002ce:	fa04 f203 	lsl.w	r2, r4, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	431a      	orrs	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	601a      	str	r2, [r3, #0]
		break;
 80002dc:	e05c      	b.n	8000398 <GPIO_INIT+0x160>

	case GPIO_INPUT_ANALOG:
	case GPIO_INPUT_FLOATING:
		mode = ((PIN_config->GPIO_MODE - 4 ) << 2) | (PIN_config->GPIO_SPEED) ;
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	3b04      	subs	r3, #4
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	b25a      	sxtb	r2, r3
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	78db      	ldrb	r3, [r3, #3]
 80002ec:	b25b      	sxtb	r3, r3
 80002ee:	4313      	orrs	r3, r2
 80002f0:	b25b      	sxtb	r3, r3
 80002f2:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 80002f4:	7afc      	ldrb	r4, [r7, #11]
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff38 	bl	8000170 <GPIO_CRLH_PIN>
 8000300:	4603      	mov	r3, r0
 8000302:	fa04 f203 	lsl.w	r2, r4, r3
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	431a      	orrs	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	601a      	str	r2, [r3, #0]
		break;
 8000310:	e042      	b.n	8000398 <GPIO_INIT+0x160>

	case GPIO_INPUT_PULLUP:
		mode = ((PIN_config->GPIO_MODE - 4 ) << 2) | (PIN_config->GPIO_SPEED);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	789b      	ldrb	r3, [r3, #2]
 8000316:	3b04      	subs	r3, #4
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	b25a      	sxtb	r2, r3
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	78db      	ldrb	r3, [r3, #3]
 8000320:	b25b      	sxtb	r3, r3
 8000322:	4313      	orrs	r3, r2
 8000324:	b25b      	sxtb	r3, r3
 8000326:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 8000328:	7afc      	ldrb	r4, [r7, #11]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff1e 	bl	8000170 <GPIO_CRLH_PIN>
 8000334:	4603      	mov	r3, r0
 8000336:	fa04 f203 	lsl.w	r2, r4, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	431a      	orrs	r2, r3
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	601a      	str	r2, [r3, #0]
		GPIOx->ODR |= PIN_config->GPIO_PIN;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	683a      	ldr	r2, [r7, #0]
 800034a:	8812      	ldrh	r2, [r2, #0]
 800034c:	431a      	orrs	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	60da      	str	r2, [r3, #12]
		break;
 8000352:	e021      	b.n	8000398 <GPIO_INIT+0x160>

	case GPIO_INPUT_PULLDOWN:
		mode = ((PIN_config->GPIO_MODE - 5 ) << 2) | (PIN_config->GPIO_SPEED);
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	3b05      	subs	r3, #5
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	b25a      	sxtb	r2, r3
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	78db      	ldrb	r3, [r3, #3]
 8000362:	b25b      	sxtb	r3, r3
 8000364:	4313      	orrs	r3, r2
 8000366:	b25b      	sxtb	r3, r3
 8000368:	72fb      	strb	r3, [r7, #11]
		*ConfigRegister |= (mode << GPIO_CRLH_PIN(PIN_config->GPIO_PIN));
 800036a:	7afc      	ldrb	r4, [r7, #11]
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff fefd 	bl	8000170 <GPIO_CRLH_PIN>
 8000376:	4603      	mov	r3, r0
 8000378:	fa04 f203 	lsl.w	r2, r4, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	431a      	orrs	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]
		GPIOx->ODR &= ~PIN_config->GPIO_PIN;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	8812      	ldrh	r2, [r2, #0]
 800038e:	43d2      	mvns	r2, r2
 8000390:	401a      	ands	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	60da      	str	r2, [r3, #12]
		break;
 8000396:	bf00      	nop
	}

}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	bd90      	pop	{r4, r7, pc}

080003a0 <GPIO_GET_PIN>:
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), PIN NUMBER THAT WILL BE READ ACCORDING TO @ref GPIO_PINS_define(uint16 PIN_NUMBER)
//@param [out] 	- PINy VALUE ACCORDING TO //@ref GPIO_PINS_VALUE_define
//@retval 		- NOTHING
//Note			-

uint8 GPIO_GET_PIN(GPIO_typedef *GPIOx,uint16 PIN_NUMBER){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]

	if(GPIOx->IDR & PIN_NUMBER)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	689a      	ldr	r2, [r3, #8]
 80003b0:	887b      	ldrh	r3, [r7, #2]
 80003b2:	4013      	ands	r3, r2
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <GPIO_GET_PIN+0x1c>
		return GPIO_PIN_SET;
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <GPIO_GET_PIN+0x1e>
	else
		return GPIO_PIN_RESET;
 80003bc:	2300      	movs	r3, #0

}
 80003be:	4618      	mov	r0, r3
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <GPIO_SET_PIN>:
//@brief 		- WRITE ON THE PINy OF GPIOx
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), PIN NUMBER THAT WILL BE READ ACCORDING TO @ref GPIO_PINS_define(uint16 PIN_NUMBER), THE VALUE THAT WILL BE WRITTEN (uint8 PIN_VALUE)
//@retval 		- NOTHING
//Note			-

void GPIO_SET_PIN(GPIO_typedef *GPIOx, uint16 PIN_NUMBER, uint8 PIN_VALUE){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
 80003d0:	460b      	mov	r3, r1
 80003d2:	807b      	strh	r3, [r7, #2]
 80003d4:	4613      	mov	r3, r2
 80003d6:	707b      	strb	r3, [r7, #1]

	if(PIN_VALUE){
 80003d8:	787b      	ldrb	r3, [r7, #1]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d006      	beq.n	80003ec <GPIO_SET_PIN+0x24>
		GPIOx->ODR |= (uint32)PIN_NUMBER;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	68da      	ldr	r2, [r3, #12]
 80003e2:	887b      	ldrh	r3, [r7, #2]
 80003e4:	431a      	orrs	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	60da      	str	r2, [r3, #12]
		//GPIOx->BRR |= (uint32)PIN_NUMBER;
		//or
		//GPIOx->BSRR |= ((uint32)PIN_NUMBER << 16);
	}

}
 80003ea:	e006      	b.n	80003fa <GPIO_SET_PIN+0x32>
		GPIOx->ODR &= ~(uint32)PIN_NUMBER;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	43db      	mvns	r3, r3
 80003f4:	401a      	ands	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	60da      	str	r2, [r3, #12]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr

08000404 <GPIO_SET_PORT>:
//@brief 		- WRITE ON THE GPIOx PORT
//@param [in] 	- GPIO PORT(GPIO_typedef *GPIOx), THE VALUE THAT WILL BE WRITTEN (uint16 PORT_VALUE)
//@retval 		- NOTHING
//Note			-

void GPIO_SET_PORT(GPIO_typedef *GPIOx, uint16 PORT_VALUE){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	807b      	strh	r3, [r7, #2]

	GPIOx->ODR = (uint32)PORT_VALUE;
 8000410:	887a      	ldrh	r2, [r7, #2]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	60da      	str	r2, [r3, #12]

}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <GPIO_OUTPUT_PIN>:
	PIN.GPIO_MODE = mode ;
	PIN.GPIO_SPEED = GPIO_INPUT_SPEED ;
	GPIO_INIT(GPIOx, &PIN);
}

void GPIO_OUTPUT_PIN(GPIO_typedef *GPIOx, uint16 pin, uint8 mode, uint8 speed){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	4608      	mov	r0, r1
 800042a:	4611      	mov	r1, r2
 800042c:	461a      	mov	r2, r3
 800042e:	4603      	mov	r3, r0
 8000430:	807b      	strh	r3, [r7, #2]
 8000432:	460b      	mov	r3, r1
 8000434:	707b      	strb	r3, [r7, #1]
 8000436:	4613      	mov	r3, r2
 8000438:	703b      	strb	r3, [r7, #0]
	GPIO_PINS_config PIN;
	PIN.GPIO_PIN = pin ;
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	81bb      	strh	r3, [r7, #12]
	PIN.GPIO_MODE = mode ;
 800043e:	787b      	ldrb	r3, [r7, #1]
 8000440:	73bb      	strb	r3, [r7, #14]
	PIN.GPIO_SPEED = speed ;
 8000442:	783b      	ldrb	r3, [r7, #0]
 8000444:	73fb      	strb	r3, [r7, #15]
	GPIO_INIT(GPIOx, &PIN);
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff fef3 	bl	8000238 <GPIO_INIT>
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <KPD_Init>:
static uint8 KEYS[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};


//*********************************  KPD APIs  *******************************//

void KPD_Init(){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 4 ; i++){
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	e014      	b.n	8000492 <KPD_Init+0x36>
		GPIO_OUTPUT_PIN(KPD_GPIO, ROW[i], GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <KPD_Init+0x4c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000470:	2301      	movs	r3, #1
 8000472:	2200      	movs	r2, #0
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <KPD_Init+0x50>)
 8000476:	f7ff ffd3 	bl	8000420 <GPIO_OUTPUT_PIN>
		GPIO_OUTPUT_PIN(KPD_GPIO, COL[i], GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <KPD_Init+0x54>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000482:	2301      	movs	r3, #1
 8000484:	2200      	movs	r2, #0
 8000486:	4809      	ldr	r0, [pc, #36]	; (80004ac <KPD_Init+0x50>)
 8000488:	f7ff ffca 	bl	8000420 <GPIO_OUTPUT_PIN>
	for(int i = 0 ; i < 4 ; i++){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b03      	cmp	r3, #3
 8000496:	dde7      	ble.n	8000468 <KPD_Init+0xc>
	}

	GPIO_SET_PORT(KPD_GPIO, 0XFF);
 8000498:	21ff      	movs	r1, #255	; 0xff
 800049a:	4804      	ldr	r0, [pc, #16]	; (80004ac <KPD_Init+0x50>)
 800049c:	f7ff ffb2 	bl	8000404 <GPIO_SET_PORT>
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000000 	.word	0x20000000
 80004ac:	40010c00 	.word	0x40010c00
 80004b0:	20000008 	.word	0x20000008

080004b4 <KPD_Get_Key>:

uint8 KPD_Get_Key(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0

	for(int i = 0 ; i < 4 ; i++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	e045      	b.n	800054c <KPD_Get_Key+0x98>
		for(int k = 0 ; k < 4 ; k++){
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	e00b      	b.n	80004de <KPD_Get_Key+0x2a>
			GPIO_SET_PIN(KPD_GPIO, COL[k], GPIO_PIN_SET);
 80004c6:	4a25      	ldr	r2, [pc, #148]	; (800055c <KPD_Get_Key+0xa8>)
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4823      	ldr	r0, [pc, #140]	; (8000560 <KPD_Get_Key+0xac>)
 80004d4:	f7ff ff78 	bl	80003c8 <GPIO_SET_PIN>
		for(int k = 0 ; k < 4 ; k++){
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	3301      	adds	r3, #1
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	ddf0      	ble.n	80004c6 <KPD_Get_Key+0x12>
		}
		GPIO_SET_PIN(KPD_GPIO, COL[i], GPIO_PIN_RESET);
 80004e4:	4a1d      	ldr	r2, [pc, #116]	; (800055c <KPD_Get_Key+0xa8>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4619      	mov	r1, r3
 80004f0:	481b      	ldr	r0, [pc, #108]	; (8000560 <KPD_Get_Key+0xac>)
 80004f2:	f7ff ff69 	bl	80003c8 <GPIO_SET_PIN>
		for(int j = 0 ; j < 4 ; j++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e021      	b.n	8000540 <KPD_Get_Key+0x8c>
			if(GPIO_GET_PIN(KPD_GPIO, ROW[j]) == GPIO_PIN_RESET){
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <KPD_Get_Key+0xb0>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000504:	4619      	mov	r1, r3
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <KPD_Get_Key+0xac>)
 8000508:	f7ff ff4a 	bl	80003a0 <GPIO_GET_PIN>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d113      	bne.n	800053a <KPD_Get_Key+0x86>
				while(GPIO_GET_PIN(KPD_GPIO, ROW[j]) == GPIO_PIN_RESET);
 8000512:	bf00      	nop
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <KPD_Get_Key+0xb0>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800051c:	4619      	mov	r1, r3
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <KPD_Get_Key+0xac>)
 8000520:	f7ff ff3e 	bl	80003a0 <GPIO_GET_PIN>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f4      	beq.n	8000514 <KPD_Get_Key+0x60>
				return KEYS[j][i];
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <KPD_Get_Key+0xb4>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	441a      	add	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	e00c      	b.n	8000554 <KPD_Get_Key+0xa0>
		for(int j = 0 ; j < 4 ; j++){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b03      	cmp	r3, #3
 8000544:	ddda      	ble.n	80004fc <KPD_Get_Key+0x48>
	for(int i = 0 ; i < 4 ; i++){
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2b03      	cmp	r3, #3
 8000550:	ddb6      	ble.n	80004c0 <KPD_Get_Key+0xc>
			}
		}

	}
	return 'E';
 8000552:	2345      	movs	r3, #69	; 0x45
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000008 	.word	0x20000008
 8000560:	40010c00 	.word	0x40010c00
 8000564:	20000000 	.word	0x20000000
 8000568:	20000010 	.word	0x20000010

0800056c <_delay_ms>:

//*********************************  LCD APIs  *******************************//

uint8 locx = 0;
uint8 locy = 0;
void _delay_ms(uint32_t time) {
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	e00b      	b.n	8000592 <_delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	e002      	b.n	8000586 <_delay_ms+0x1a>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	3301      	adds	r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	2bfe      	cmp	r3, #254	; 0xfe
 800058a:	d9f9      	bls.n	8000580 <_delay_ms+0x14>
	for (i = 0; i < time; i++)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3ef      	bcc.n	800057a <_delay_ms+0xe>
			;
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <LCD_Init>:
void LCD_Init(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

	_delay_ms(20);
 80005a8:	2014      	movs	r0, #20
 80005aa:	f7ff ffdf 	bl	800056c <_delay_ms>

	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 80005ae:	2301      	movs	r3, #1
 80005b0:	2200      	movs	r2, #0
 80005b2:	2120      	movs	r1, #32
 80005b4:	4828      	ldr	r0, [pc, #160]	; (8000658 <LCD_Init+0xb4>)
 80005b6:	f7ff ff33 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 80005ba:	2301      	movs	r3, #1
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4825      	ldr	r0, [pc, #148]	; (8000658 <LCD_Init+0xb4>)
 80005c2:	f7ff ff2d 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_EN_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 80005c6:	2301      	movs	r3, #1
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	4822      	ldr	r0, [pc, #136]	; (8000658 <LCD_Init+0xb4>)
 80005ce:	f7ff ff27 	bl	8000420 <GPIO_OUTPUT_PIN>

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	4820      	ldr	r0, [pc, #128]	; (8000658 <LCD_Init+0xb4>)
 80005d8:	f7ff fef6 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2110      	movs	r1, #16
 80005e0:	481d      	ldr	r0, [pc, #116]	; (8000658 <LCD_Init+0xb4>)
 80005e2:	f7ff fef1 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_EN_PIN, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	481b      	ldr	r0, [pc, #108]	; (8000658 <LCD_Init+0xb4>)
 80005ec:	f7ff feec 	bl	80003c8 <GPIO_SET_PIN>

	_delay_ms(20);
 80005f0:	2014      	movs	r0, #20
 80005f2:	f7ff ffbb 	bl	800056c <_delay_ms>
	LCD_Clear_Screen();
 80005f6:	f000 f8d3 	bl	80007a0 <LCD_Clear_Screen>

	LCD_Send_CMD(EIGHT_BIT_MODE_TWO_LINE);

#elif FOUR_PINS_MODE

	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_DATA0_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 80005fa:	2301      	movs	r3, #1
 80005fc:	2200      	movs	r2, #0
 80005fe:	2101      	movs	r1, #1
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <LCD_Init+0xb4>)
 8000602:	f7ff ff0d 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_DATA1_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000606:	2301      	movs	r3, #1
 8000608:	2200      	movs	r2, #0
 800060a:	2102      	movs	r1, #2
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <LCD_Init+0xb4>)
 800060e:	f7ff ff07 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_DATA2_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000612:	2301      	movs	r3, #1
 8000614:	2200      	movs	r2, #0
 8000616:	2104      	movs	r1, #4
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <LCD_Init+0xb4>)
 800061a:	f7ff ff01 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(LCD_CTRL_GPIO, LCD_DATA3_PIN, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 800061e:	2301      	movs	r3, #1
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LCD_Init+0xb4>)
 8000626:	f7ff fefb 	bl	8000420 <GPIO_OUTPUT_PIN>

	_delay_ms(40);
 800062a:	2028      	movs	r0, #40	; 0x28
 800062c:	f7ff ff9e 	bl	800056c <_delay_ms>

	LCD_Send_CMD(FOUR_BIT_MODE);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 f813 	bl	800065c <LCD_Send_CMD>
	LCD_Send_CMD(FOUR_BIT_MODE_TWO_LINE);
 8000636:	2028      	movs	r0, #40	; 0x28
 8000638:	f000 f810 	bl	800065c <LCD_Send_CMD>

#endif

	_delay_ms(40);
 800063c:	2028      	movs	r0, #40	; 0x28
 800063e:	f7ff ff95 	bl	800056c <_delay_ms>
	LCD_Send_CMD(ENTRY_MODE);
 8000642:	2006      	movs	r0, #6
 8000644:	f000 f80a 	bl	800065c <LCD_Send_CMD>
	LCD_Send_CMD(RESET_CURSOR_FIRST_LINE);
 8000648:	2080      	movs	r0, #128	; 0x80
 800064a:	f000 f807 	bl	800065c <LCD_Send_CMD>
	LCD_Send_CMD(CURSOR_BLINKING);
 800064e:	200f      	movs	r0, #15
 8000650:	f000 f804 	bl	800065c <LCD_Send_CMD>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40010800 	.word	0x40010800

0800065c <LCD_Send_CMD>:

void LCD_Send_CMD(uint8 CMD){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]

#elif FOUR_PINS_MODE

	//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(CMD >> 4);

	CMD & GPIO_PIN4 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_RESET);
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	2b00      	cmp	r3, #0
 800066e:	d005      	beq.n	800067c <LCD_Send_CMD+0x20>
 8000670:	2201      	movs	r2, #1
 8000672:	2101      	movs	r1, #1
 8000674:	4849      	ldr	r0, [pc, #292]	; (800079c <LCD_Send_CMD+0x140>)
 8000676:	f7ff fea7 	bl	80003c8 <GPIO_SET_PIN>
 800067a:	e004      	b.n	8000686 <LCD_Send_CMD+0x2a>
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	4846      	ldr	r0, [pc, #280]	; (800079c <LCD_Send_CMD+0x140>)
 8000682:	f7ff fea1 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN5 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_RESET);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0320 	and.w	r3, r3, #32
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <LCD_Send_CMD+0x40>
 8000690:	2201      	movs	r2, #1
 8000692:	2102      	movs	r1, #2
 8000694:	4841      	ldr	r0, [pc, #260]	; (800079c <LCD_Send_CMD+0x140>)
 8000696:	f7ff fe97 	bl	80003c8 <GPIO_SET_PIN>
 800069a:	e004      	b.n	80006a6 <LCD_Send_CMD+0x4a>
 800069c:	2200      	movs	r2, #0
 800069e:	2102      	movs	r1, #2
 80006a0:	483e      	ldr	r0, [pc, #248]	; (800079c <LCD_Send_CMD+0x140>)
 80006a2:	f7ff fe91 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN6 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_RESET);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <LCD_Send_CMD+0x60>
 80006b0:	2201      	movs	r2, #1
 80006b2:	2104      	movs	r1, #4
 80006b4:	4839      	ldr	r0, [pc, #228]	; (800079c <LCD_Send_CMD+0x140>)
 80006b6:	f7ff fe87 	bl	80003c8 <GPIO_SET_PIN>
 80006ba:	e004      	b.n	80006c6 <LCD_Send_CMD+0x6a>
 80006bc:	2200      	movs	r2, #0
 80006be:	2104      	movs	r1, #4
 80006c0:	4836      	ldr	r0, [pc, #216]	; (800079c <LCD_Send_CMD+0x140>)
 80006c2:	f7ff fe81 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN7 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_RESET);
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	da05      	bge.n	80006da <LCD_Send_CMD+0x7e>
 80006ce:	2201      	movs	r2, #1
 80006d0:	2108      	movs	r1, #8
 80006d2:	4832      	ldr	r0, [pc, #200]	; (800079c <LCD_Send_CMD+0x140>)
 80006d4:	f7ff fe78 	bl	80003c8 <GPIO_SET_PIN>
 80006d8:	e004      	b.n	80006e4 <LCD_Send_CMD+0x88>
 80006da:	2200      	movs	r2, #0
 80006dc:	2108      	movs	r1, #8
 80006de:	482f      	ldr	r0, [pc, #188]	; (800079c <LCD_Send_CMD+0x140>)
 80006e0:	f7ff fe72 	bl	80003c8 <GPIO_SET_PIN>

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	482c      	ldr	r0, [pc, #176]	; (800079c <LCD_Send_CMD+0x140>)
 80006ea:	f7ff fe6d 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2110      	movs	r1, #16
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <LCD_Send_CMD+0x140>)
 80006f4:	f7ff fe68 	bl	80003c8 <GPIO_SET_PIN>
	LCD_Ready();
 80006f8:	f000 f98c 	bl	8000a14 <LCD_Ready>

	//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(CMD & 0x0F);

	CMD & GPIO_PIN0 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_RESET);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d005      	beq.n	8000712 <LCD_Send_CMD+0xb6>
 8000706:	2201      	movs	r2, #1
 8000708:	2101      	movs	r1, #1
 800070a:	4824      	ldr	r0, [pc, #144]	; (800079c <LCD_Send_CMD+0x140>)
 800070c:	f7ff fe5c 	bl	80003c8 <GPIO_SET_PIN>
 8000710:	e004      	b.n	800071c <LCD_Send_CMD+0xc0>
 8000712:	2200      	movs	r2, #0
 8000714:	2101      	movs	r1, #1
 8000716:	4821      	ldr	r0, [pc, #132]	; (800079c <LCD_Send_CMD+0x140>)
 8000718:	f7ff fe56 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN1 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_RESET);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <LCD_Send_CMD+0xd6>
 8000726:	2201      	movs	r2, #1
 8000728:	2102      	movs	r1, #2
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <LCD_Send_CMD+0x140>)
 800072c:	f7ff fe4c 	bl	80003c8 <GPIO_SET_PIN>
 8000730:	e004      	b.n	800073c <LCD_Send_CMD+0xe0>
 8000732:	2200      	movs	r2, #0
 8000734:	2102      	movs	r1, #2
 8000736:	4819      	ldr	r0, [pc, #100]	; (800079c <LCD_Send_CMD+0x140>)
 8000738:	f7ff fe46 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN2 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_RESET);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	2b00      	cmp	r3, #0
 8000744:	d005      	beq.n	8000752 <LCD_Send_CMD+0xf6>
 8000746:	2201      	movs	r2, #1
 8000748:	2104      	movs	r1, #4
 800074a:	4814      	ldr	r0, [pc, #80]	; (800079c <LCD_Send_CMD+0x140>)
 800074c:	f7ff fe3c 	bl	80003c8 <GPIO_SET_PIN>
 8000750:	e004      	b.n	800075c <LCD_Send_CMD+0x100>
 8000752:	2200      	movs	r2, #0
 8000754:	2104      	movs	r1, #4
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <LCD_Send_CMD+0x140>)
 8000758:	f7ff fe36 	bl	80003c8 <GPIO_SET_PIN>
	CMD & GPIO_PIN3 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_RESET);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	2b00      	cmp	r3, #0
 8000764:	d005      	beq.n	8000772 <LCD_Send_CMD+0x116>
 8000766:	2201      	movs	r2, #1
 8000768:	2108      	movs	r1, #8
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <LCD_Send_CMD+0x140>)
 800076c:	f7ff fe2c 	bl	80003c8 <GPIO_SET_PIN>
 8000770:	e004      	b.n	800077c <LCD_Send_CMD+0x120>
 8000772:	2200      	movs	r2, #0
 8000774:	2108      	movs	r1, #8
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <LCD_Send_CMD+0x140>)
 8000778:	f7ff fe26 	bl	80003c8 <GPIO_SET_PIN>

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <LCD_Send_CMD+0x140>)
 8000782:	f7ff fe21 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <LCD_Send_CMD+0x140>)
 800078c:	f7ff fe1c 	bl	80003c8 <GPIO_SET_PIN>
	LCD_Ready();
 8000790:	f000 f940 	bl	8000a14 <LCD_Ready>

#endif
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40010800 	.word	0x40010800

080007a0 <LCD_Clear_Screen>:
void LCD_Clear_Screen (){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	LCD_GotoXY(0,0);
 80007a4:	2100      	movs	r1, #0
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f808 	bl	80007bc <LCD_GotoXY>
	LCD_Send_CMD(CLEAR_DISPLAY_CURSOR_DDRAM);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff ff55 	bl	800065c <LCD_Send_CMD>
	LCD_Send_CMD(RESET_CURSOR_FIRST_LINE);
 80007b2:	2080      	movs	r0, #128	; 0x80
 80007b4:	f7ff ff52 	bl	800065c <LCD_Send_CMD>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <LCD_GotoXY>:

void LCD_GotoXY(uint8 line, uint8 position ){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71bb      	strb	r3, [r7, #6]
	locy = line;
 80007cc:	4a11      	ldr	r2, [pc, #68]	; (8000814 <LCD_GotoXY+0x58>)
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	7013      	strb	r3, [r2, #0]
	locx = position;
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <LCD_GotoXY+0x5c>)
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	7013      	strb	r3, [r2, #0]
	if(line == 0){
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d109      	bne.n	80007f2 <LCD_GotoXY+0x36>
		if(position <= 15 && position >= 0){
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d812      	bhi.n	800080a <LCD_GotoXY+0x4e>
			LCD_Send_CMD(RESET_CURSOR_FIRST_LINE + position);
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	3b80      	subs	r3, #128	; 0x80
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff36 	bl	800065c <LCD_Send_CMD>
	else if(line == 1){
		if(position <= 15 && position >= 0){
			LCD_Send_CMD(RESET_CURSOR_SECOND_LINE + position);
		}
	}
}
 80007f0:	e00b      	b.n	800080a <LCD_GotoXY+0x4e>
	else if(line == 1){
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d108      	bne.n	800080a <LCD_GotoXY+0x4e>
		if(position <= 15 && position >= 0){
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b0f      	cmp	r3, #15
 80007fc:	d805      	bhi.n	800080a <LCD_GotoXY+0x4e>
			LCD_Send_CMD(RESET_CURSOR_SECOND_LINE + position);
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	3b40      	subs	r3, #64	; 0x40
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff29 	bl	800065c <LCD_Send_CMD>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000003d 	.word	0x2000003d
 8000818:	2000003c 	.word	0x2000003c

0800081c <LCD_Send_Char>:

void LCD_Send_Char(uint8 Data){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]

	if(locx == 16 && locy == 0){
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <LCD_Send_Char+0x194>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b10      	cmp	r3, #16
 800082c:	d109      	bne.n	8000842 <LCD_Send_Char+0x26>
 800082e:	4b61      	ldr	r3, [pc, #388]	; (80009b4 <LCD_Send_Char+0x198>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <LCD_Send_Char+0x26>
		locy = 1;
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <LCD_Send_Char+0x198>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
		locx = 0;
 800083c:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <LCD_Send_Char+0x194>)
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
	}
	if(locx == 16 && locy == 1){
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <LCD_Send_Char+0x194>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b10      	cmp	r3, #16
 8000848:	d109      	bne.n	800085e <LCD_Send_Char+0x42>
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <LCD_Send_Char+0x198>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d105      	bne.n	800085e <LCD_Send_Char+0x42>
		locy = 0;
 8000852:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <LCD_Send_Char+0x198>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
		locx = 0;
 8000858:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <LCD_Send_Char+0x194>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	}
	LCD_GotoXY(locy,locx);
 800085e:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <LCD_Send_Char+0x198>)
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b53      	ldr	r3, [pc, #332]	; (80009b0 <LCD_Send_Char+0x194>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4610      	mov	r0, r2
 800086a:	f7ff ffa7 	bl	80007bc <LCD_GotoXY>
	locx++;
 800086e:	4b50      	ldr	r3, [pc, #320]	; (80009b0 <LCD_Send_Char+0x194>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <LCD_Send_Char+0x194>)
 8000878:	701a      	strb	r2, [r3, #0]
	LCD_Ready();

#elif FOUR_PINS_MODE

	//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(Data >> 4);
	Data & GPIO_PIN4 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_RESET);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	2b00      	cmp	r3, #0
 8000882:	d005      	beq.n	8000890 <LCD_Send_Char+0x74>
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	484b      	ldr	r0, [pc, #300]	; (80009b8 <LCD_Send_Char+0x19c>)
 800088a:	f7ff fd9d 	bl	80003c8 <GPIO_SET_PIN>
 800088e:	e004      	b.n	800089a <LCD_Send_Char+0x7e>
 8000890:	2200      	movs	r2, #0
 8000892:	2101      	movs	r1, #1
 8000894:	4848      	ldr	r0, [pc, #288]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000896:	f7ff fd97 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN5 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_RESET);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d005      	beq.n	80008b0 <LCD_Send_Char+0x94>
 80008a4:	2201      	movs	r2, #1
 80008a6:	2102      	movs	r1, #2
 80008a8:	4843      	ldr	r0, [pc, #268]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008aa:	f7ff fd8d 	bl	80003c8 <GPIO_SET_PIN>
 80008ae:	e004      	b.n	80008ba <LCD_Send_Char+0x9e>
 80008b0:	2200      	movs	r2, #0
 80008b2:	2102      	movs	r1, #2
 80008b4:	4840      	ldr	r0, [pc, #256]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008b6:	f7ff fd87 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN6 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_RESET);
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d005      	beq.n	80008d0 <LCD_Send_Char+0xb4>
 80008c4:	2201      	movs	r2, #1
 80008c6:	2104      	movs	r1, #4
 80008c8:	483b      	ldr	r0, [pc, #236]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008ca:	f7ff fd7d 	bl	80003c8 <GPIO_SET_PIN>
 80008ce:	e004      	b.n	80008da <LCD_Send_Char+0xbe>
 80008d0:	2200      	movs	r2, #0
 80008d2:	2104      	movs	r1, #4
 80008d4:	4838      	ldr	r0, [pc, #224]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008d6:	f7ff fd77 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN7 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_RESET);
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da05      	bge.n	80008ee <LCD_Send_Char+0xd2>
 80008e2:	2201      	movs	r2, #1
 80008e4:	2108      	movs	r1, #8
 80008e6:	4834      	ldr	r0, [pc, #208]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008e8:	f7ff fd6e 	bl	80003c8 <GPIO_SET_PIN>
 80008ec:	e004      	b.n	80008f8 <LCD_Send_Char+0xdc>
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4831      	ldr	r0, [pc, #196]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008f4:	f7ff fd68 	bl	80003c8 <GPIO_SET_PIN>

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	482e      	ldr	r0, [pc, #184]	; (80009b8 <LCD_Send_Char+0x19c>)
 80008fe:	f7ff fd63 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2120      	movs	r1, #32
 8000906:	482c      	ldr	r0, [pc, #176]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000908:	f7ff fd5e 	bl	80003c8 <GPIO_SET_PIN>
	LCD_Ready();
 800090c:	f000 f882 	bl	8000a14 <LCD_Ready>

	//	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0)|(Data & 0x0F);
	Data & GPIO_PIN0 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA0_PIN, GPIO_PIN_RESET);
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <LCD_Send_Char+0x10a>
 800091a:	2201      	movs	r2, #1
 800091c:	2101      	movs	r1, #1
 800091e:	4826      	ldr	r0, [pc, #152]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000920:	f7ff fd52 	bl	80003c8 <GPIO_SET_PIN>
 8000924:	e004      	b.n	8000930 <LCD_Send_Char+0x114>
 8000926:	2200      	movs	r2, #0
 8000928:	2101      	movs	r1, #1
 800092a:	4823      	ldr	r0, [pc, #140]	; (80009b8 <LCD_Send_Char+0x19c>)
 800092c:	f7ff fd4c 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN1 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA1_PIN, GPIO_PIN_RESET);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	2b00      	cmp	r3, #0
 8000938:	d005      	beq.n	8000946 <LCD_Send_Char+0x12a>
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	481e      	ldr	r0, [pc, #120]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000940:	f7ff fd42 	bl	80003c8 <GPIO_SET_PIN>
 8000944:	e004      	b.n	8000950 <LCD_Send_Char+0x134>
 8000946:	2200      	movs	r2, #0
 8000948:	2102      	movs	r1, #2
 800094a:	481b      	ldr	r0, [pc, #108]	; (80009b8 <LCD_Send_Char+0x19c>)
 800094c:	f7ff fd3c 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN2 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA2_PIN, GPIO_PIN_RESET);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	2b00      	cmp	r3, #0
 8000958:	d005      	beq.n	8000966 <LCD_Send_Char+0x14a>
 800095a:	2201      	movs	r2, #1
 800095c:	2104      	movs	r1, #4
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000960:	f7ff fd32 	bl	80003c8 <GPIO_SET_PIN>
 8000964:	e004      	b.n	8000970 <LCD_Send_Char+0x154>
 8000966:	2200      	movs	r2, #0
 8000968:	2104      	movs	r1, #4
 800096a:	4813      	ldr	r0, [pc, #76]	; (80009b8 <LCD_Send_Char+0x19c>)
 800096c:	f7ff fd2c 	bl	80003c8 <GPIO_SET_PIN>
	Data & GPIO_PIN3 ? GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_SET): GPIO_SET_PIN(LCD_DATA_GPIO, LCD_DATA3_PIN, GPIO_PIN_RESET);
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <LCD_Send_Char+0x16a>
 800097a:	2201      	movs	r2, #1
 800097c:	2108      	movs	r1, #8
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000980:	f7ff fd22 	bl	80003c8 <GPIO_SET_PIN>
 8000984:	e004      	b.n	8000990 <LCD_Send_Char+0x174>
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <LCD_Send_Char+0x19c>)
 800098c:	f7ff fd1c 	bl	80003c8 <GPIO_SET_PIN>

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RS_PIN, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <LCD_Send_Char+0x19c>)
 8000996:	f7ff fd17 	bl	80003c8 <GPIO_SET_PIN>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_RW_PIN, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2120      	movs	r1, #32
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <LCD_Send_Char+0x19c>)
 80009a0:	f7ff fd12 	bl	80003c8 <GPIO_SET_PIN>
	LCD_Ready();
 80009a4:	f000 f836 	bl	8000a14 <LCD_Ready>

#endif
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000003c 	.word	0x2000003c
 80009b4:	2000003d 	.word	0x2000003d
 80009b8:	40010800 	.word	0x40010800

080009bc <LCD_Send_String>:

void LCD_Send_String(uint8 *Data){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

	uint8 cnt = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
	while(*Data > 0){
 80009c8:	e01c      	b.n	8000a04 <LCD_Send_String+0x48>
		cnt++;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	3301      	adds	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
		LCD_Send_Char(*Data++);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff1f 	bl	800081c <LCD_Send_Char>
		if(cnt == 16)
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	2b10      	cmp	r3, #16
 80009e2:	d104      	bne.n	80009ee <LCD_Send_String+0x32>
			LCD_GotoXY(1,0);
 80009e4:	2100      	movs	r1, #0
 80009e6:	2001      	movs	r0, #1
 80009e8:	f7ff fee8 	bl	80007bc <LCD_GotoXY>
 80009ec:	e00a      	b.n	8000a04 <LCD_Send_String+0x48>
		else if (cnt == 32){
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b20      	cmp	r3, #32
 80009f2:	d107      	bne.n	8000a04 <LCD_Send_String+0x48>
			LCD_Clear_Screen();
 80009f4:	f7ff fed4 	bl	80007a0 <LCD_Clear_Screen>
			LCD_GotoXY(0,0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fede 	bl	80007bc <LCD_GotoXY>
			cnt = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]
	while(*Data > 0){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1de      	bne.n	80009ca <LCD_Send_String+0xe>
		}
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LCD_Ready>:
	float32 num = (Number < 0) ? -1* Number : Number;
	sprintf(str,"%s%d.%04d",sign,(uint32)num,(uint32)((num - (uint32)num) * 10000));
	LCD_Send_String(str);
}

void LCD_Ready (void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_EN_PIN, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <LCD_Ready+0x28>)
 8000a1e:	f7ff fcd3 	bl	80003c8 <GPIO_SET_PIN>
	_delay_ms(2);
 8000a22:	2002      	movs	r0, #2
 8000a24:	f7ff fda2 	bl	800056c <_delay_ms>
	GPIO_SET_PIN(LCD_CTRL_GPIO, LCD_EN_PIN, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <LCD_Ready+0x28>)
 8000a2e:	f7ff fccb 	bl	80003c8 <GPIO_SET_PIN>
	_delay_ms(2);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fd9a 	bl	800056c <_delay_ms>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40010800 	.word	0x40010800

08000a40 <GPIO_init>:
#define SIX 0x02   //0b00000010
#define SEVEN 0x19 //0b00011001
#define EIGHT 0x00 //0b00000000
#define NINE 0x10  //0b00010000

void GPIO_init() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN7, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a44:	2301      	movs	r3, #1
 8000a46:	2200      	movs	r2, #0
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <GPIO_init+0x68>)
 8000a4c:	f7ff fce8 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN8, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a50:	2301      	movs	r3, #1
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <GPIO_init+0x68>)
 8000a5a:	f7ff fce1 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN9, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <GPIO_init+0x68>)
 8000a68:	f7ff fcda 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN10, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <GPIO_init+0x68>)
 8000a76:	f7ff fcd3 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN11, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a82:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <GPIO_init+0x68>)
 8000a84:	f7ff fccc 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN12, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a88:	2301      	movs	r3, #1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <GPIO_init+0x68>)
 8000a92:	f7ff fcc5 	bl	8000420 <GPIO_OUTPUT_PIN>
	GPIO_OUTPUT_PIN(GPIOA, GPIO_PIN13, GPIO_OUTPUT_PUSH_PULL, GPIO_OUTPUT_SPEED_10);
 8000a96:	2301      	movs	r3, #1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <GPIO_init+0x68>)
 8000aa0:	f7ff fcbe 	bl	8000420 <GPIO_OUTPUT_PIN>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40010800 	.word	0x40010800

08000aac <CLOCK_init>:

void CLOCK_init(){
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	//	ENABLE GPIOA
	RCC_GPIOA_ENABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <CLOCK_init+0x24>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <CLOCK_init+0x24>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
	//	ENABLE GPIOB
	RCC_GPIOB_ENABLE;
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <CLOCK_init+0x24>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <CLOCK_init+0x24>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6193      	str	r3, [r2, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <main>:


int main(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
	CLOCK_init();
 8000ada:	f7ff ffe7 	bl	8000aac <CLOCK_init>
	KPD_Init();
 8000ade:	f7ff fcbd 	bl	800045c <KPD_Init>
	LCD_Init();
 8000ae2:	f7ff fd5f 	bl	80005a4 <LCD_Init>
	uint8 key_pressed;
	LCD_Send_String("HEY");
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <main+0xc8>)
 8000ae8:	f7ff ff68 	bl	80009bc <LCD_Send_String>
	_delay_ms(100);
 8000aec:	2064      	movs	r0, #100	; 0x64
 8000aee:	f7ff fd3d 	bl	800056c <_delay_ms>
	LCD_Clear_Screen();
 8000af2:	f7ff fe55 	bl	80007a0 <LCD_Clear_Screen>
	GPIO_init();
 8000af6:	f7ff ffa3 	bl	8000a40 <GPIO_init>
	uint8 LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 8000afa:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <main+0xcc>)
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b02:	c303      	stmia	r3!, {r0, r1}
 8000b04:	801a      	strh	r2, [r3, #0]
 8000b06:	3302      	adds	r3, #2
 8000b08:	0c12      	lsrs	r2, r2, #16
 8000b0a:	701a      	strb	r2, [r3, #0]
	uint8 DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 8000b0c:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <main+0xd0>)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b12:	c303      	stmia	r3!, {r0, r1}
 8000b14:	801a      	strh	r2, [r3, #0]
 8000b16:	3302      	adds	r3, #2
 8000b18:	0c12      	lsrs	r2, r2, #16
 8000b1a:	701a      	strb	r2, [r3, #0]
	for (uint8 i = 0; i < 11; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	77bb      	strb	r3, [r7, #30]
 8000b20:	e01b      	b.n	8000b5a <main+0x86>
	{
		LCD_Send_Char(LCD_DISPLAY[i]);
 8000b22:	7fbb      	ldrb	r3, [r7, #30]
 8000b24:	f107 0220 	add.w	r2, r7, #32
 8000b28:	4413      	add	r3, r2
 8000b2a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe74 	bl	800081c <LCD_Send_Char>
		GPIO_SET_PORT(GPIOA, DISPLAY[i] << 7);
 8000b34:	7fbb      	ldrb	r3, [r7, #30]
 8000b36:	f107 0220 	add.w	r2, r7, #32
 8000b3a:	4413      	add	r3, r2
 8000b3c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	01db      	lsls	r3, r3, #7
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	4817      	ldr	r0, [pc, #92]	; (8000ba8 <main+0xd4>)
 8000b4a:	f7ff fc5b 	bl	8000404 <GPIO_SET_PORT>
		_delay_ms(100);
 8000b4e:	2064      	movs	r0, #100	; 0x64
 8000b50:	f7ff fd0c 	bl	800056c <_delay_ms>
	for (uint8 i = 0; i < 11; i++)
 8000b54:	7fbb      	ldrb	r3, [r7, #30]
 8000b56:	3301      	adds	r3, #1
 8000b58:	77bb      	strb	r3, [r7, #30]
 8000b5a:	7fbb      	ldrb	r3, [r7, #30]
 8000b5c:	2b0a      	cmp	r3, #10
 8000b5e:	d9e0      	bls.n	8000b22 <main+0x4e>
	}
	LCD_Clear_Screen();
 8000b60:	f7ff fe1e 	bl	80007a0 <LCD_Clear_Screen>
	KPD_Init();
 8000b64:	f7ff fc7a 	bl	800045c <KPD_Init>
	LCD_Send_String("Keypad is ready");
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <main+0xd8>)
 8000b6a:	f7ff ff27 	bl	80009bc <LCD_Send_String>
	_delay_ms(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f7ff fcfc 	bl	800056c <_delay_ms>
	LCD_Clear_Screen();
 8000b74:	f7ff fe14 	bl	80007a0 <LCD_Clear_Screen>

	while (1) {

		key_pressed = KPD_Get_Key();
 8000b78:	f7ff fc9c 	bl	80004b4 <KPD_Get_Key>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	77fb      	strb	r3, [r7, #31]
		while(key_pressed == 'E'){
 8000b80:	e003      	b.n	8000b8a <main+0xb6>
			key_pressed = KPD_Get_Key();
 8000b82:	f7ff fc97 	bl	80004b4 <KPD_Get_Key>
 8000b86:	4603      	mov	r3, r0
 8000b88:	77fb      	strb	r3, [r7, #31]
		while(key_pressed == 'E'){
 8000b8a:	7ffb      	ldrb	r3, [r7, #31]
 8000b8c:	2b45      	cmp	r3, #69	; 0x45
 8000b8e:	d0f8      	beq.n	8000b82 <main+0xae>
		}
		LCD_Send_Char(key_pressed);
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fe42 	bl	800081c <LCD_Send_Char>
		key_pressed = KPD_Get_Key();
 8000b98:	e7ee      	b.n	8000b78 <main+0xa4>
 8000b9a:	bf00      	nop
 8000b9c:	08000c64 	.word	0x08000c64
 8000ba0:	08000c78 	.word	0x08000c78
 8000ba4:	08000c84 	.word	0x08000c84
 8000ba8:	40010800 	.word	0x40010800
 8000bac:	08000c68 	.word	0x08000c68

08000bb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bde:	f000 f811 	bl	8000c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000be2:	f7ff ff77 	bl	8000ad4 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   r0, =_estack
 8000be8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000bf4:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 8000bf8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000bfc:	20000040 	.word	0x20000040

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <__libc_init_array>:
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	2500      	movs	r5, #0
 8000c08:	4e0c      	ldr	r6, [pc, #48]	; (8000c3c <__libc_init_array+0x38>)
 8000c0a:	4c0d      	ldr	r4, [pc, #52]	; (8000c40 <__libc_init_array+0x3c>)
 8000c0c:	1ba4      	subs	r4, r4, r6
 8000c0e:	10a4      	asrs	r4, r4, #2
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	d109      	bne.n	8000c28 <__libc_init_array+0x24>
 8000c14:	f000 f81a 	bl	8000c4c <_init>
 8000c18:	2500      	movs	r5, #0
 8000c1a:	4e0a      	ldr	r6, [pc, #40]	; (8000c44 <__libc_init_array+0x40>)
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <__libc_init_array+0x44>)
 8000c1e:	1ba4      	subs	r4, r4, r6
 8000c20:	10a4      	asrs	r4, r4, #2
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d105      	bne.n	8000c32 <__libc_init_array+0x2e>
 8000c26:	bd70      	pop	{r4, r5, r6, pc}
 8000c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c2c:	4798      	blx	r3
 8000c2e:	3501      	adds	r5, #1
 8000c30:	e7ee      	b.n	8000c10 <__libc_init_array+0xc>
 8000c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c36:	4798      	blx	r3
 8000c38:	3501      	adds	r5, #1
 8000c3a:	e7f2      	b.n	8000c22 <__libc_init_array+0x1e>
 8000c3c:	08000c90 	.word	0x08000c90
 8000c40:	08000c90 	.word	0x08000c90
 8000c44:	08000c90 	.word	0x08000c90
 8000c48:	08000c94 	.word	0x08000c94

08000c4c <_init>:
 8000c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4e:	bf00      	nop
 8000c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c52:	bc08      	pop	{r3}
 8000c54:	469e      	mov	lr, r3
 8000c56:	4770      	bx	lr

08000c58 <_fini>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	bf00      	nop
 8000c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c5e:	bc08      	pop	{r3}
 8000c60:	469e      	mov	lr, r3
 8000c62:	4770      	bx	lr
